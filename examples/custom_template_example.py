"""
Example of using custom email templates with py-mail-me.
"""

import os
from dotenv import load_dotenv
from py_mail_me import py_mail_me, EmailTemplate

# Load environment variables
load_dotenv()

# Define custom HTML and text templates
CUSTOM_HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #4CAF50; color: white; padding: 10px; }
        .content { background-color: #f9f9f9; padding: 20px; }
        .footer { text-align: center; padding: 10px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${title}</h1>
        </div>
        <div class="content">
            <p>${message}</p>
            ${details}
            ${error_info}
        </div>
        <div class="footer">
            <p>Generated by py-mail-me at ${timestamp}</p>
        </div>
    </div>
</body>
</html>
"""

CUSTOM_TEXT_TEMPLATE = """
=== ${title} ===

${message}

${details}
${error_info}

Generated by py-mail-me at ${timestamp}
"""

# Create custom template
custom_template = EmailTemplate(
    html_template=CUSTOM_HTML_TEMPLATE,
    text_template=CUSTOM_TEXT_TEMPLATE
)

@py_mail_me(
    email=os.getenv("TEST_EMAIL"),
    subject="Custom Template Test",
    template=custom_template
)
def process_data():
    """Example function that processes some data."""
    print("Processing data...")
    # Simulate some work
    import time
    time.sleep(2)
    print("Data processing completed!")

if __name__ == "__main__":
    process_data() 